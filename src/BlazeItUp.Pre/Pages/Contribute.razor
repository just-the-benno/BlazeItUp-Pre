@page "/Contribute"

@inject HttpClient client

<Loading IsLoading="@_isLoading">
    <MudCard Class="ma-10 pa-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Your help is greatly appreciated</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @((MarkupString)@Markdig.Markdown.ToHtml(_content))
        </MudCardContent>
        <MudCardActions>
            <MudLink Color="Color.Primary" Typo="Typo.button" Href="/Contact"> Get in touch</MudLink>
        </MudCardActions>
    </MudCard>

    <MudGrid Class="pa-10">
        @foreach (var item in RandomizeRoles())
        {
            <MudItem xs="12" sm="6">
                <MudCard Style="height: 100%">
                    <MudCardContent>
                        <div class="d-flex flex-row justify-center">
                            <i class="ma-10 contributor-role-icon @item.Icon"></i>
                        </div>
                        <MudText Typo="Typo.h5" Class="contributor-role-header">@item.Name</MudText>
                        <MudText Typo="Typo.body2">@item.Description</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</Loading>

@code {

    public record SupporterRole(String Name, String Icon, String Description);

    private Boolean _isLoading;

    private List<SupporterRole> _roles;
    private String _content;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _roles = await client.GetFromJsonAsync<List<SupporterRole>>("https://gitcdn.link/repo/just-the-benno/BlazeItUp-Pre/master/content/contributor-roles.json");
        RandomizeRoles();
        _content = await client.GetAsStringAsync("https://gitcdn.link/repo/just-the-benno/BlazeItUp-Pre/master/content/contributor-content.md");

        _isLoading = false;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        RandomizeRoles();
    }

    private List<SupporterRole> RandomizeRoles()
    {
        Random random = new Random();
        List<SupporterRole> copy = new List<SupporterRole>(_roles);
        List<SupporterRole> target = new List<SupporterRole>(copy.Count);

        while (copy.Count > 0)
        {
            Int32 index = random.Next(0, copy.Count);
            var role = copy[index];
            copy.RemoveAt(index);
            target.Add(role);
        }

        return target;
    }

}
